/*
Auth API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: AUTH_VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authclient

import (
	"encoding/json"
)

// ManyUsersResponse struct for ManyUsersResponse
type ManyUsersResponse struct {
	Data []User `json:"data,omitempty"`
}

// NewManyUsersResponse instantiates a new ManyUsersResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManyUsersResponse() *ManyUsersResponse {
	this := ManyUsersResponse{}
	return &this
}

// NewManyUsersResponseWithDefaults instantiates a new ManyUsersResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManyUsersResponseWithDefaults() *ManyUsersResponse {
	this := ManyUsersResponse{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ManyUsersResponse) GetData() []User {
	if o == nil || o.Data == nil {
		var ret []User
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManyUsersResponse) GetDataOk() ([]User, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ManyUsersResponse) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given []User and assigns it to the Data field.
func (o *ManyUsersResponse) SetData(v []User) {
	o.Data = v
}

func (o ManyUsersResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableManyUsersResponse struct {
	value *ManyUsersResponse
	isSet bool
}

func (v NullableManyUsersResponse) Get() *ManyUsersResponse {
	return v.value
}

func (v *NullableManyUsersResponse) Set(val *ManyUsersResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableManyUsersResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableManyUsersResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManyUsersResponse(val *ManyUsersResponse) *NullableManyUsersResponse {
	return &NullableManyUsersResponse{value: val, isSet: true}
}

func (v NullableManyUsersResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManyUsersResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


